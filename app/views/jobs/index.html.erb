<div class="container mx-auto px-4 py-8">
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-4">Gerenciamento de Jobs</h1>
    <p class="text-gray-600">Monitore e execute jobs em background para o sistema de sorteio de times.</p>
  </div>

  <!-- Status dos Jobs -->
  <div class="bg-white rounded-lg shadow-md p-6 mb-8">
    <h2 class="text-xl font-semibold text-gray-800 mb-4">Status dos Jobs</h2>
    
    <!-- Alerta se Sidekiq não estiver disponível -->
    <div id="sidekiq-warning" class="hidden bg-yellow-50 border border-yellow-200 rounded-md p-4 mb-4">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-yellow-800">
            Sidekiq não está disponível
          </h3>
          <div class="mt-2 text-sm text-yellow-700">
            <p id="sidekiq-status-message">Verificando status...</p>
            <p class="mt-1">Para usar jobs em background, inicie o Sidekiq com: <code class="bg-yellow-100 px-1 rounded">bundle exec sidekiq</code></p>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Loading indicator -->
    <div id="status-loading" class="bg-gray-50 border border-gray-200 rounded-md p-4 mb-4">
      <div class="flex items-center">
        <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-3"></div>
        <span class="text-sm text-gray-600">Verificando status do Sidekiq...</span>
      </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <div class="bg-blue-50 p-4 rounded-lg">
        <div class="text-2xl font-bold text-blue-600" id="pending-jobs">-</div>
        <div class="text-sm text-blue-800">Jobs Pendentes</div>
      </div>
      <div class="bg-yellow-50 p-4 rounded-lg">
        <div class="text-2xl font-bold text-yellow-600" id="scheduled-jobs">-</div>
        <div class="text-sm text-yellow-800">Jobs Agendados</div>
      </div>
      <div class="bg-red-50 p-4 rounded-lg">
        <div class="text-2xl font-bold text-red-600" id="retry-jobs">-</div>
        <div class="text-sm text-red-800">Jobs em Retry</div>
      </div>
    </div>
    <button onclick="refreshStatus()" class="mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
      Atualizar Status
    </button>
  </div>

  <!-- Ações Globais -->
  <div class="bg-white rounded-lg shadow-md p-6 mb-8">
    <h2 class="text-xl font-semibold text-gray-800 mb-4">Ações Globais</h2>
    <div class="space-y-4">
      <%= button_to "Limpeza Geral", cleanup_all_jobs_path, 
          method: :post, 
          class: "bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded",
          data: { confirm: "Tem certeza? Isso irá limpar dados antigos de todas as sessões." } %>
    </div>
  </div>

  <!-- Sessões de Jogo -->
  <div class="bg-white rounded-lg shadow-md p-6">
    <h2 class="text-xl font-semibold text-gray-800 mb-4">Sessões de Jogo</h2>
    
    <% if @game_sessions.any? %>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Data</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Jogadores</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Times</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <% @game_sessions.each do |session| %>
              <tr>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  <%= session.date.strftime('%d/%m/%Y') %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                    <%= case session.status
                        when 'scheduled' then 'bg-yellow-100 text-yellow-800'
                        when 'in_progress' then 'bg-blue-100 text-blue-800'
                        when 'completed' then 'bg-green-100 text-green-800'
                        when 'cancelled' then 'bg-red-100 text-red-800'
                        else 'bg-gray-100 text-gray-800'
                        end %>">
                    <%= session.status_text %>
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  <%= session.total_players %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  <%= session.total_teams %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                  <% if session.status == 'scheduled' && session.can_start? %>
                    <%= button_to "Sortear Times", sort_teams_job_game_session_path(session), 
                        method: :post, 
                        class: "bg-green-500 hover:bg-green-700 text-white text-xs font-bold py-1 px-2 rounded" %>
                  <% end %>
                  
                  <% if session.status == 'in_progress' %>
                    <%= button_to "Enviar Notificações", send_notifications_game_session_path(session), 
                        method: :post, 
                        class: "bg-blue-500 hover:bg-blue-700 text-white text-xs font-bold py-1 px-2 rounded" %>
                  <% end %>
                  
                  <%= button_to "Limpar Sessão", cleanup_session_game_session_path(session), 
                      method: :post, 
                      class: "bg-red-500 hover:bg-red-700 text-white text-xs font-bold py-1 px-2 rounded",
                      data: { confirm: "Limpar dados desta sessão?" } %>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    <% else %>
      <div class="text-center py-8">
        <p class="text-gray-500">Nenhuma sessão de jogo encontrada.</p>
        <%= link_to "Criar Sessão", new_game_session_path, class: "mt-4 inline-block bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" %>
      </div>
    <% end %>
  </div>
</div>

<script>
function refreshStatus() {
  // Mostrar loading
  const loading = document.getElementById('status-loading');
  const warning = document.getElementById('sidekiq-warning');
  
  loading.classList.remove('hidden');
  warning.classList.add('hidden');
  
  fetch('/jobs/status')
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      return response.json();
    })
    .then(data => {
      // Esconder loading
      loading.classList.add('hidden');
      
      // Atualizar contadores
      document.getElementById('pending-jobs').textContent = data.pending;
      document.getElementById('scheduled-jobs').textContent = data.scheduled;
      document.getElementById('retry-jobs').textContent = data.retry;
      
      // Mostrar/esconder aviso do Sidekiq baseado na resposta real
      if (data.sidekiq_available) {
        warning.classList.add('hidden');
      } else {
        warning.classList.remove('hidden');
        // Atualizar mensagem de status
        const statusMessage = document.getElementById('sidekiq-status-message');
        if (statusMessage && data.status_message) {
          statusMessage.textContent = data.status_message;
        }
      }
    })
    .catch(error => {
      console.error('Erro ao atualizar status:', error);
      
      // Esconder loading
      loading.classList.add('hidden');
      
      // Só mostrar aviso se for erro de conexão (não erro do servidor)
      if (error.name === 'TypeError' || error.message.includes('Failed to fetch')) {
        warning.classList.remove('hidden');
      }
    });
}

// Atualizar status automaticamente a cada 30 segundos
setInterval(refreshStatus, 30000);

// Carregar status inicial após um pequeno delay
setTimeout(refreshStatus, 500);
</script> 